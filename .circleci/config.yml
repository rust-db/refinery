restore_registry: &RESTORE_REGISTRY
  restore_cache:
    key: registry
save_registry: &SAVE_REGISTRY
  save_cache:
    key: registry-{{ .BuildNum }}
    paths:
    - /usr/local/cargo/registry/index
deps_key: &DEPS_KEY
  key: deps-{{ checksum "~/rust-version" }}-{{ checksum "Cargo.lock" }}
restore_deps: &RESTORE_DEPS
  restore_cache:
    <<: *DEPS_KEY
save_deps: &SAVE_DEPS
  save_cache:
    <<: *DEPS_KEY
    paths:
    - target
    - /usr/local/cargo/registry/cache

version: 2.1
orbs:
  win: circleci/windows@2.2.0
parameters:
  stable:
    type: string
    default: "1.46"
  previous:
    type: string
    default: "1.45"
  nightly:
    type: string
    default: "rustlang/rust:nightly"
jobs:
  test-macros-and-cli-previous:
    docker:
      - image: rust:<< pipeline.parameters.previous >>
    steps:
      - checkout
      - run: rustup self update
      - run: cd refinery_macros && cargo test
      - run: cd refinery_cli && cargo test --features=mysql,postgresql,sqlite-bundled --no-default-features
  cargo-fmt-clippy-and-test-macros-and-cli-stable:
    docker:
      - image: rust:<< pipeline.parameters.stable >>
    steps:
      - checkout
      - run: rustup self update
      - run: rustup component add clippy
      - run: rustup component add rustfmt
      - run: cargo fmt --all -- --check
      - run: cd refinery_core && cargo test --all-features -- --test-threads 1
      - run: cd refinery && cargo build --all-features
      - run: cd refinery_macros && cargo clippy
      - run: cd refinery_cli && cargo clippy
      - run: cd refinery_macros && cargo test
      - run: cd refinery_cli && cargo test
  test-macros-and-cli-nightly:
    docker:
      - image: << pipeline.parameters.nightly >>
    steps:
      - checkout
      - run: rustup self update
      - run: RUSTFLAGS="-D warnings" cd refinery && cargo build --all-features
      - run: cd refinery_macros && cargo test
      - run: cd refinery_cli && cargo test
  test-sqlite-previous:
    docker:
      - image: rust:<< pipeline.parameters.previous >>
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
      - run: cd refinery && cargo test --features rusqlite --test rusqlite
  test-sqlite-stable:
    docker:
      - image: rust:<< pipeline.parameters.stable >>
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
      - run: cd refinery && cargo test --features rusqlite --test rusqlite
  test-sqlite-nightly:
    docker:
      - image: << pipeline.parameters.nightly >>
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=sqlite-bundled
      - run: cd refinery && cargo test --features rusqlite --test rusqlite
  test-postgres-previous:
    docker:
      - image: rust:<< pipeline.parameters.previous >>
      - image: postgres:9.6.13-alpine
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
  test-postgres-stable:
    docker:
      - image: rust:<< pipeline.parameters.stable >>
      - image: postgres:9.6.13-alpine
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
  test-postgres-nightly:
    docker:
      - image: << pipeline.parameters.nightly >>
      - image: postgres:9.6.13-alpine
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=postgresql
      - run: cd refinery && cargo test --features postgres --test postgres -- --test-threads 1
  test-tokio-postgres-stable:
    docker:
      - image: rust:<< pipeline.parameters.stable >>
      - image: postgres:9.6.13-alpine
    steps:
      - checkout
      - run: cd refinery && cargo test --features tokio,tokio-postgres --test tokio_postgres -- --test-threads 1
  test-tokio-postgres-nightly:
    docker:
      - image: << pipeline.parameters.nightly >>
      - image: postgres:9.6.13-alpine
    steps:
      - checkout
      - run: cd refinery && cargo test --features tokio,tokio-postgres --test tokio_postgres -- --test-threads 1
  test-mysql-previous:
    docker:
      - image: rust:<< pipeline.parameters.previous >>
      - image: mysql:latest
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: refinery
          MYSQL_PASSWORD: root
          MYSQL_DATABASE: refinery_test
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
  test-mysql-stable:
    docker:
      - image: rust:<< pipeline.parameters.stable >>
      - image: mysql:latest
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: refinery
          MYSQL_PASSWORD: root
          MYSQL_DATABASE: refinery_test
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
  test-mysql-nightly:
    docker:
      - image: << pipeline.parameters.nightly >>
      - image: mysql:latest
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: refinery
          MYSQL_PASSWORD: root
          MYSQL_DATABASE: refinery_test
    steps:
      - checkout
      - run: cargo install --path ./refinery_cli --no-default-features --features=mysql
      - run: cd refinery && cargo test --features mysql --test mysql -- --test-threads 1
  test-mysql-async-stable:
    docker:
      - image: rust:<< pipeline.parameters.stable >>
      - image: mysql:latest
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: refinery
          MYSQL_PASSWORD: root
          MYSQL_DATABASE: refinery_test
    steps:
      - checkout
      - run: cd refinery && cargo test --features tokio,mysql_async --test mysql_async -- --test-threads 1
  test-mysql-async-nightly:
    docker:
      - image: << pipeline.parameters.nightly >>
      - image: mysql:latest
        environment:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: refinery
          MYSQL_PASSWORD: root
          MYSQL_DATABASE: refinery_test
    steps:
      - checkout
      - run: cd refinery && cargo test --features tokio,mysql_async --test mysql_async -- --test-threads 1
workflows:
  version: 2
  build_and_test:
    jobs:
      - test-macros-and-cli-previous
      - cargo-fmt-clippy-and-test-macros-and-cli-stable
      - test-macros-and-cli-nightly
      - test-sqlite-previous
      - test-sqlite-stable
      - test-sqlite-nightly
      - test-postgres-previous
      - test-postgres-stable
      - test-postgres-nightly
      - test-tokio-postgres-stable
      - test-tokio-postgres-nightly
      - test-mysql-previous
      - test-mysql-stable
      - test-mysql-nightly
      - test-mysql-async-stable
      - test-mysql-async-nightly
      # - test-windows
